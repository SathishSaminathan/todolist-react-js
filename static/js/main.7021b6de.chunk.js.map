{"version":3,"sources":["pages/home/components/todo-add.jsx","pages/home/components/todo-cards.jsx","pages/home/components/home-presentational.jsx","pages/home/components/home-functional.jsx","pages/home/home-page.jsx","App.js","serviceWorker.js","store/rootReducer.js","store/injectReducers.js","store/createStore.js","index.js"],"names":["TextArea","Input","Option","Select","TodoAdd","xl","className","placeholder","style","width","rows","defaultValue","value","onChange","date","console","log","Date","format","type","TodoCards","useState","list","setlist","useEffect","renderRows","map","data","i","key","icon","DeleteOutlined","size","enterAnimation","leaveAnimation","onClick","arr","push","name","pop","HomePresentational","display","flexDirection","justifyContent","HomeFunctional","Home","App","Boolean","window","location","hostname","match","makeRootReducer","asyncReducers","newAsyncReducers","Object","keys","forEach","combineAsyncReducers","combineReducerObject","prop","combineReducers","injectReducers","store","initReducers","init","state","initState","saga","createSagaMiddleware","middleware","enhancers","composeEnhancers","undefined","process","compose","createStore","applyMiddleware","sagaMiddleware","injectedEffects","attachSaga","run","myStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7021b6de.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Input, Select, Button } from 'antd';\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport moment from 'moment';\r\n\r\nconst dateFormat = 'dd/mm/yyyy hh:mm:ss';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst TodoAdd = () => {\r\n\treturn (\r\n\t\t<Col xl={12} className=\"input_area\">\r\n\t\t\t<Col>\r\n\t\t\t\t<Row className=\"input_container\">\r\n\t\t\t\t\t<Col className=\"label\" xl={24}>\r\n\t\t\t\t\t\tTitle\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col className=\"input_style\">\r\n\t\t\t\t\t\t<Input placeholder=\"enter todo\" />\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row className=\"input_container\">\r\n\t\t\t\t\t<Col className=\"label\" xl={24}>\r\n\t\t\t\t\t\tMessage\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col className=\"input_style\" style={{ width: '100%' }}>\r\n\t\t\t\t\t\t<TextArea rows={4} placeholder=\"enter todo message\" />\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row className=\"input_container\">\r\n\t\t\t\t\t<Col className=\"label\" xl={24}>\r\n\t\t\t\t\t\tType\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col className=\"input_style\" style={{ width: '100%' }}>\r\n\t\t\t\t\t\t<Select defaultValue=\"Success\" style={{ width: 120 }}>\r\n\t\t\t\t\t\t\t<Option value=\"Success\">Success</Option>\r\n\t\t\t\t\t\t\t<Option value=\"Error\">Error</Option>\r\n\t\t\t\t\t\t\t<Option value=\"Warning\">Warning</Option>\r\n\t\t\t\t\t\t\t<Option value=\"Critical\">Critical</Option>\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row className=\"input_container\">\r\n\t\t\t\t\t<Col className=\"label\" xl={24}>\r\n\t\t\t\t\t\tType\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col className=\"input_style\" style={{ width: '100%' }}>\r\n\t\t\t\t\t\t<DateTimePicker className=\"date_picker_style\" onChange={(date) => console.log(date)} value={new Date()} format={dateFormat} />\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row className=\"input_container\">\r\n\t\t\t\t\t<Col className=\"\" xl={24}>\r\n\t\t\t\t\t\t<Button type=\"primary\" style={{ width: '100%' }}>\r\n\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Col>\r\n\t\t</Col>\r\n\t);\r\n};\r\n\r\nexport default TodoAdd;\r\n","import React, { useState, useEffect } from 'react';\r\nimport FlipMove from 'react-flip-move';\r\nimport { Col, Button, Row, Checkbox } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\n\r\nconst TodoCards = () => {\r\n\tconst [list, setlist] = useState([]);\r\n\r\n\tconst handleAdd = () => {\r\n\t\tlet arr = list;\r\n\t\tarr.push({ name: 'hai' });\r\n\t\tsetlist([...arr]);\r\n\t};\r\n\r\n\tconst handleRemove = () => {\r\n\t\tlet arr = list;\r\n\t\tarr.pop();\r\n\t\tsetlist([...arr]);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\trenderRows();\r\n\t}, [list]);\r\n\r\n\tconst renderRows = () => {\r\n\t\treturn list.map((data, i) => (\r\n\t\t\t<Col key={i} xl={24} className=\"card_style\">\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col xl={18}>\r\n\t\t\t\t\t\t<Col xl={24} className=\"title_area\">\r\n\t\t\t\t\t\t\t<span className=\"title\">Title</span>\r\n\t\t\t\t\t\t\t<span className=\"description\">(Due time exceeded)</span>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col xl={24}>\r\n\t\t\t\t\t\t\t<span className=\"message\">Message</span>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col xl={6} className=\"card_right\">\r\n\t\t\t\t\t\t<Checkbox></Checkbox>\r\n\t\t\t\t\t\t<Button type=\"primary\" icon={<DeleteOutlined />} size={'middle'} />\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Col>\r\n\t\t));\r\n\t};\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<FlipMove enterAnimation=\"elevator\" leaveAnimation=\"elevator\">\r\n\t\t\t\t{renderRows()}\r\n\t\t\t</FlipMove>\r\n\t\t\t<Button onClick={handleAdd}>add</Button>\r\n\t\t\t<Button onClick={handleRemove}>remove</Button>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default TodoCards;\r\n","import React from 'react';\r\nimport { Row, Col, Select } from 'antd';\r\n\r\nimport TodoAdd from './todo-add';\r\nimport TodoCards from './todo-cards';\r\n\r\nconst { Option } = Select;\r\n\r\nconst HomePresentational = () => {\r\n\treturn (\r\n\t\t<Row className=\"todo_container\">\r\n\t\t\t<Col className=\"todo_box\" xl={16}>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col xl={24} className=\"header\">\r\n\t\t\t\t\t\tTodo App\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<TodoAdd />\r\n\t\t\t\t\t<Col xl={12} className=\"list_area\">\r\n\t\t\t\t\t\t<Row style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\r\n\t\t\t\t\t\t\t<Row className=\"input_container\">\r\n\t\t\t\t\t\t\t\t<Col className=\"label\" xl={24}>\r\n\t\t\t\t\t\t\t\t\tTask Status\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col className=\"input_style\">\r\n\t\t\t\t\t\t\t\t\t<Select defaultValue=\"All\" style={{ width: 120 }}>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"All\">All</Option>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"Active\">Active</Option>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"Completed\">Completed</Option>\r\n\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t<Row className=\"input_container\">\r\n\t\t\t\t\t\t\t\t<Col className=\"label\" xl={24}>\r\n\t\t\t\t\t\t\t\t\tType\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col className=\"input_style\">\r\n\t\t\t\t\t\t\t\t\t<Select defaultValue=\"All\" style={{ width: 120 }}>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"All\">All</Option>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"Success\">Success</Option>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"Error\">Error</Option>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"Warning\">Warning</Option>\r\n\t\t\t\t\t\t\t\t\t\t<Option value=\"Critical\">Critical</Option>\r\n\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t<TodoCards />\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Col>\r\n\t\t</Row>\r\n\t);\r\n};\r\n\r\nexport default HomePresentational;\r\n","import React from 'react';\r\nimport HomePresentational from './home-presentational';\r\n\r\nconst HomeFunctional = () => {\r\n\treturn <HomePresentational />;\r\n};\r\n\r\nexport default HomeFunctional;\r\n","import React from 'react';\r\n\r\nimport './home.scss';\r\nimport HomeFunctional from './components/home-functional';\r\n\r\nconst Home = () => {\r\n\treturn <HomeFunctional />;\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nimport Home from '@pages/home/home-page';\r\n\r\nfunction App() {\r\n\treturn <Home />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst replaceAsyncReducers = (rootReducers, keys, reducer) => {\r\n    const key = keys.shift();\r\n    if (keys.length === 0) {\r\n        rootReducers[key] = reducer; // eslint-disable-line\r\n        return;\r\n    }\r\n    if (!rootReducers[key]) rootReducers[key] = {}; // eslint-disable-line\r\n    const nextRootReducers = rootReducers[key];\r\n    replaceAsyncReducers(nextRootReducers, keys, reducer);\r\n};\r\n\r\nconst combineAsyncReducers = asyncReducers => {\r\n    if (typeof asyncReducers !== \"object\") return asyncReducers;\r\n    const combineReducerObject = {};\r\n    Object.keys(asyncReducers).forEach(prop => {\r\n        const value = asyncReducers[prop];\r\n        if (typeof value === \"object\") {\r\n            combineReducerObject[prop] = combineAsyncReducers(value);\r\n        } else if (typeof value === \"function\") {\r\n            combineReducerObject[prop] = value;\r\n        }\r\n    });\r\n    return combineReducers(combineReducerObject);\r\n};\r\n\r\nexport const makeRootReducer = asyncReducers => {\r\n    const newAsyncReducers = {};\r\n    if (asyncReducers) {\r\n        Object.keys(asyncReducers).forEach(key => {\r\n            newAsyncReducers[key] = combineAsyncReducers(asyncReducers[key]);\r\n        });\r\n    }\r\n\r\n    return combineReducers({\r\n        ...newAsyncReducers\r\n    });\r\n};\r\n\r\nexport const injectReducer = (store, { key, reducer }) => {\r\n    const keys = key.split(\".\");\r\n    if (!reducer) return;\r\n    replaceAsyncReducers(store.asyncReducers, keys, reducer);\r\n    store.replaceReducer(makeRootReducer(store.asyncReducers));\r\n    return reducer;\r\n};\r\n\r\nfunction canInjectEffect(store, key) {\r\n    if (!key) return false;\r\n    if (Object.keys(store.injectedEffects).includes(key)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport const injectSaga = (store, { key, saga }) => {\r\n    if (!saga) return;\r\n    if (!canInjectEffect(store, key)) return;\r\n    store.injectedEffects[key] = saga; // eslint-disable-line no-param-reassign\r\n    store.attachSaga(saga);\r\n};\r\n\r\n/*\r\n  function to inject saga.\r\n*/\r\nexport const injectSideEffects = (store, { key, type, effect }) => {\r\n    switch (type) {\r\n        case \"SAGA\": {\r\n            injectSaga(store, { key, saga: effect });\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport default makeRootReducer;","\r\n// import counterReducer from '../screens/counter/counterReducer';\r\n// import counterSage from '../screens/counter/sagas';\r\n// import { injectReducer, injectSaga } from './rootReducer';\r\nconst injectReducers = (store) => {\r\n\t// injectReducer(store, { key: 'counter', reducer: counterReducer });\r\n\t// injectSaga(store, { key: 'counter', saga: counterSage });\r\n};\r\n\r\nexport default injectReducers;","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport makeRootReducer from './rootReducer';\r\nimport injectReducers from './injectReducers';\r\n\r\nconst initReducer = (state = {}, action) => {\r\n\treturn state;\r\n};\r\n\r\nconst initReducers = {\r\n\tinit: initReducer,\r\n};\r\n\r\nconst myStore = (initState = {}) => {\r\n\tconst saga = createSagaMiddleware();\r\n\tlet middleware = [saga];\r\n\tconst enhancers = [];\r\n\tlet composeEnhancers = undefined;\r\n\r\n    console.log(`process.env.NODE_ENV: ${process.env.NODE_ENV}`);\r\n\tif (process.env.NODE_ENV !== \"production\") {\r\n\t\t//remote debugging can be switched on/off by shaking the expo client.\r\n\t\t// if (Platform.OS === 'ios') NativeModules.DevSettings.setIsDebuggingRemotely(true);\r\n\t\tcomposeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;;\r\n\t\t// middleware.push(logger);\r\n\t} else {\r\n\t\tcomposeEnhancers = compose;\r\n\t}\r\n\r\n\t// composeEnhancers = compose;\r\n\tconst store = createStore(\r\n\t\tmakeRootReducer(initReducers),\r\n\t\tinitState,\r\n\t\tcomposeEnhancers(applyMiddleware(...middleware), ...enhancers)\r\n\t);\r\n\r\n\tstore.asyncReducers = {};\r\n\tstore.sagaMiddleware = saga;\r\n\tstore.injectedEffects = {};\r\n\r\n\tstore.attachSaga = saga => {\r\n\t\tstore.sagaMiddleware.run(saga);\r\n\t};\r\n\tinjectReducers(store);\r\n\treturn store;\r\n};\r\n\r\nexport default myStore;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'antd/dist/antd.css';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport myStore from './store/createStore';\r\nconst store = myStore();\r\n\r\n//test\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}